/*
 * TCSS 305 - Assignment 5
 */

package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.MouseInputAdapter;
import tools.BasicTool;
import tools.ChangeablePanel;
import tools.ClearPanelAction;
import tools.EllipseTool;
import tools.LineTool;
import tools.RectangleTool;

/**
 * Presents the GUI for the PowerPaint application.
 * 
 * @author Alan Fowler (acfowler@uw.edu)
 * @version Autumn 2022
 */
public final class PaintGUI implements PropertyChangeListener {
    
    // constants (if any)    
    /**
     * The toolkit used to get the size of the screen.
     */
    private static final Toolkit KIT = Toolkit.getDefaultToolkit();
    
    /**
     * The dimension of the user's screen.
     */
    private static final Dimension SCREEN_SIZE = KIT.getScreenSize();
    
    /**
     * The width of the user's screen.
     */
    private static final int SCREEN_WIDTH = SCREEN_SIZE.width;
    
    /**
     * The height of the user's screen.
     */
    private static final int SCREEN_HEIGHT = SCREEN_SIZE.height;
    
    /**
     * The scale that determines the size of the frame.
     */
    private static final int SCALE = 3;
    
    // instance fields
    /**
     * The Frame used to display the program.
     */
    private JFrame myFrame;
    
    /**
     * The panel used to draw shapes.
     */
    private DoodlePanel myDoodlePanel;
    
    /**
     * 
     */
    private JMenuBar myMenu;
    
    private BasicTool myLineTool;
    
    private BasicTool myRectangleTool;

    private BasicTool myEllipseTool;
    
    final ChangeablePanel myShapesPanel;
    
    final ClearPanelAction myPanelAction;
    
    public PaintGUI() {
        super();
        
        // initialize instance fields here
        myFrame = new JFrame("TCSS 305 Paint – Autumn 2022");
        myDoodlePanel = new DoodlePanel();
        myMenu = new JMenuBar();
        myLineTool = new LineTool();
        myRectangleTool = new RectangleTool();
        myEllipseTool = new EllipseTool();
        myShapesPanel = new ChangeablePanel();
        myPanelAction = new ClearPanelAction(myShapesPanel);
        
        // setup and display the GUI
        start();
    }

    /**
     * Performs all tasks necessary to display the UI.
     */
    public void start() {

        // replace the temporary code shown below with your code
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //Changes the icon on the top left corner.
        final ImageIcon wIcon = new ImageIcon("files/w_small.png");
        myFrame.setIconImage(wIcon.getImage());
        //Sets the frame size using dimension and dividing the screen size by the scale
        myFrame.setSize(new Dimension(SCREEN_WIDTH / SCALE, SCREEN_HEIGHT / SCALE));
        myFrame.setLocation(SCREEN_WIDTH / 2 - myFrame.getWidth() / 2,
                SCREEN_HEIGHT / 2 - myFrame.getHeight() / 2);
        
        myDoodlePanel.addMouseListener(new MouseEntranceListener());
        
        //////////////////////////////
        myDoodlePanel.addPropertyChangeListener(this);
        ///////////////////////////////
        myFrame.add(myDoodlePanel);
        
        //the option button in the menu
        final JMenu optionsMenu = new JMenu("Options");

        final JMenu thicknessB = new JMenu("Thickness"); 
        thicknessB.add(createSlider());
        optionsMenu.add(thicknessB);
        optionsMenu.addSeparator();
        final JMenuItem colorB = new JMenuItem("Color…");
        colorB.addActionListener(new ColorListener());
        optionsMenu.add(colorB);
        optionsMenu.addSeparator();
        
        myShapesPanel.addPropertyChangeListener(myDoodlePanel);
        myShapesPanel.addPropertyChangeListener(myPanelAction);       
        final JMenuItem clearB = new JMenuItem(myPanelAction);
        optionsMenu.add(clearB);
        
        ///////////////////////////
        myMenu.add(optionsMenu);
        
        //Changes the icon.
        final ImageIcon lineIcon = new ImageIcon("files/line_bw.gif");
        final ImageIcon rectangleIcon = new ImageIcon("files/rectangle_bw.gif");
        final ImageIcon ellipseIcon = new ImageIcon("files/ellipse_bw.gif");
        
        //creates an array of actions with the icons
        final Action[] toolActions = {new LineAction(lineIcon), 
            new RectangleAction(rectangleIcon), new EllipseAction(ellipseIcon)};
        
        //creates a custom JMenu
        final SpecialMenuBar toolsMenu = new SpecialMenuBar("Tools");
        //creates a custom toolBar 
        final SpecialToolBar toolBar = new SpecialToolBar();
        //Adds actions to buttons and then adds them to the tool menu and tool bar.
        for (Action currentA : toolActions) {
            toolsMenu.createMenuButton(currentA);
            toolBar.createToolButton(currentA);
        }
        myMenu.add(toolsMenu);
        
        final JMenu helpMenu = createHelpMenu(wIcon);
        myMenu.add(helpMenu);
        
        myFrame.add(toolBar, BorderLayout.SOUTH);
        myFrame.setJMenuBar(myMenu);
        myFrame.setVisible(true);
        
    }
    
    // make the inside values static final ###################################
    private JSlider createSlider() {
        final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 0, 15, 3);
        slider.setMajorTickSpacing(5);
        slider.setMinorTickSpacing(1);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        
        class SlideListener implements ChangeListener {
            @Override
            public void stateChanged(final ChangeEvent theEvent) {
                final int chosenThickness = slider.getValue();
                if (chosenThickness > 0) {
                    myDoodlePanel.setDrawingPermit(true);
                    myDoodlePanel.setCurrentThickness(chosenThickness);
                } else {
                    myDoodlePanel.setDrawingPermit(false);
                }
            }
        }
        
        slider.addChangeListener(new SlideListener());
        return slider;
    }
    
    private JMenu createHelpMenu(final ImageIcon theIcon) {
        //creates a help menu
        final JMenu helpMenu = new JMenu("Help");
        final JMenuItem aboutButton = new JMenuItem("About...");
        aboutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                JOptionPane.showMessageDialog(myFrame, 
                        "Derek J. Ruiz Garcia \n Autumn 2022", 
                        "TCSS 305 Paint", JOptionPane.INFORMATION_MESSAGE, theIcon);
            }
        });
        helpMenu.add(aboutButton);
        return helpMenu;
    }
    
    @Override
    public void propertyChange(final PropertyChangeEvent theEvent) {
        myPanelAction.setEnabled("contains shapes".equals(theEvent.getPropertyName()));
    }
    
    /**
     * A local listener for the line button that will set the current
     * drawing tool in the panel to line tool.
     * @author Derek Jagger Ruiz Garcia
     * @version 11/27/2022
     */
    public class LineAction extends AbstractAction {

        /**
         * 
         */
        private static final long serialVersionUID = 1556815184721042561L;

        public LineAction(final ImageIcon theIcon) {
            super("Line", theIcon);
            putValue(Action.SELECTED_KEY, true);
        }
        
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myDoodlePanel.setTool(myLineTool);
        }
        
    }
    
    public class RectangleAction extends AbstractAction {

        /**
         * 
         */
        private static final long serialVersionUID = -7871030088279364388L;

        public RectangleAction(final ImageIcon theIcon) {
            super("Rectangle", theIcon);
            putValue(Action.SELECTED_KEY, true);
        }
        
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myDoodlePanel.setTool(myRectangleTool);
        }
        
    }
    
    public class EllipseAction extends AbstractAction {

        /**
         * 
         */
        private static final long serialVersionUID = 3437026304574047648L;

        public EllipseAction(final ImageIcon theIcon) {
            super("Ellipse", theIcon);
            putValue(Action.SELECTED_KEY, true);
        }
        
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myDoodlePanel.setTool(myEllipseTool);
        }
        
    }
    
    public class ColorListener implements ActionListener {

        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            final Color chosenColor = JColorChooser.showDialog(myDoodlePanel,
                    "Choose a color", myDoodlePanel.getCurrentColor());
            if (chosenColor != null) {
                myDoodlePanel.setCurrentColor(chosenColor);
            }
        }
        
    }
    
    public class MouseEntranceListener extends MouseInputAdapter {
        
        @Override
        public void mouseEntered(final MouseEvent theEvent) {
            myDoodlePanel.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
        }
        
        @Override
        public void mouseExited(final MouseEvent theEvent) {
            myDoodlePanel.setCursor(null);
        }
    }
}
