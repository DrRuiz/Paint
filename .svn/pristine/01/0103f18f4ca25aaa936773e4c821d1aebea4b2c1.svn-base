/*
 * TCSS 305 - Assignment 5
 */

package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.MouseInputAdapter;
import tools.BasicTool;
import tools.ChangeableClearButton;
import tools.ClearPanelAction;
import tools.Ellipse;
import tools.Line;
import tools.Rectangle;

/**
 * Presents the GUI for the PowerPaint application.
 * 
 * @author Alan Fowler (acfowler@uw.edu)
 * @author Derek Jagger Ruiz Garcia 
 * @version Autumn 2022
 */
public final class PaintGUI {
    
    // constants (if any)    \
    //future update
    //Make them private and make a public static method that returns 
    //the only visual of the array
    /** An Array containing all the black and white icons of the line, 
     *  rectangle and ellipse.
     */
    public static final ImageIcon[] MY_ICONS = {new ImageIcon("files/line_bw.gif"), 
        new ImageIcon("files/rectangle_bw.gif"), new ImageIcon("files/ellipse_bw.gif")};
    
    /** An Array containing all the color icons of the line, rectangle 
     *  and ellipse.
     */
    public static final ImageIcon[] MY_SPECIAL_ICONS = {new ImageIcon("files/line.gif"), 
        new ImageIcon("files/rectangle.gif"), new ImageIcon("files/ellipse.gif")};
    
    /** The toolkit used to get the size of the screen. */
    private static final Toolkit KIT = Toolkit.getDefaultToolkit();
    
    /** The dimension of the user's screen. */
    private static final Dimension SCREEN_SIZE = KIT.getScreenSize();
    
    /** The width of the user's screen. */
    private static final int SCREEN_WIDTH = SCREEN_SIZE.width;
    
    /** The height of the user's screen. */
    private static final int SCREEN_HEIGHT = SCREEN_SIZE.height;
    
    /** The scale that determines the size of the frame. */
    private static final int SCALE = 3;
    
    /** The major tick that the slider will be divided in. */
    private static final int MAJOR_TICK = 5;
    
    /** The minor tick that the slider will be divided in. */
    private static final int MINOR_TICK = 1;
    
    /** The initial thickness of the slider. */
    private static final int INITIAL_THICKNESS = 3;
    
    /** The maximum thickness allowed by the thickness slider. */
    private static final int MAX_THICKNESS = 15;
    
    /** The minimum thickness allowed by the thickness slider. */
    private static final int MIN_THICKNESS = 0;
    
    // instance fields
    /** The Frame used to display the program. */
    private final JFrame myFrame;
    
    /** The panel used to draw shapes. */
    private final DoodlePanel myDoodlePanel;
    
    /** The menu that stores the options, tools and help buttons. */
    private final JMenuBar myMenu;
    
    /** A basic tool that helps create lines. */
    private final BasicTool myLineTool;
    
    /** A basic tool that helps create rectangles.*/
    private final BasicTool myRectangleTool;

    /** A basic tool that helps create ellipses. */
    private final BasicTool myEllipseTool;
    
    /** The fill button as a CheckBoxMenuItem. */
    private final JCheckBoxMenuItem myFillButton;
    
    /** A GUI constructor that initializes all the instance fields. */
    public PaintGUI() {
        super();
        
        myFrame = new JFrame("TCSS 305 Paint – Autumn 2022");
        myDoodlePanel = new DoodlePanel();
        myMenu = new JMenuBar();
        myLineTool = new Line();
        myRectangleTool = new Rectangle();
        myEllipseTool = new Ellipse();
        myFillButton = new JCheckBoxMenuItem("Fill");
        // setup and display the GUI
        start();
    }

    /** Performs all tasks necessary to display the UI. */
    public void start() {
        
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //panel icon
        final ImageIcon wIcon = new ImageIcon("files/w_small.png");   
        
        myFrame.setIconImage(wIcon.getImage());
        myFrame.setSize(new Dimension(SCREEN_WIDTH / SCALE, SCREEN_HEIGHT / SCALE));
        myFrame.setLocation(SCREEN_WIDTH / 2 - myFrame.getWidth() / 2,
                SCREEN_HEIGHT / 2 - myFrame.getHeight() / 2);
        //for the cross bar
        myDoodlePanel.addMouseListener(new MouseEntranceListener());
        
        myFrame.add(myDoodlePanel);
        
        final JMenu optionsMenu = new JMenu("Options");

        //thickness
        final JMenu thicknessB = new JMenu("Thickness"); 
        thicknessB.add(createSlider());
        optionsMenu.add(thicknessB);
        optionsMenu.addSeparator();
        //color
        final JMenuItem colorB = new JMenuItem("Color…");
        colorB.addActionListener(new OutlineColorListener());
        optionsMenu.add(colorB);
        //fill color
        final JMenuItem fillColorB = new JMenuItem("Fill Color…");
        fillColorB.addActionListener(new InnerColorListener());
        optionsMenu.add(fillColorB);
        optionsMenu.addSeparator();
        //fill button
        //need to change
        myFillButton.setEnabled(false);
        myFillButton.addActionListener(new FillListener());
        optionsMenu.add(myFillButton);
        
        optionsMenu.addSeparator();
        //clear
        final ClearPanelAction clearAction = new ClearPanelAction();
        clearAction.addPropertyChangeListener(myDoodlePanel);      
        final JMenuItem clearB = new JMenuItem(clearAction);
        final ChangeableClearButton changeableClearB = new ChangeableClearButton(clearB);
        optionsMenu.add(clearB);
        
        //to enable and disable the clear button
        clearAction.addPropertyChangeListener(changeableClearB);
        myDoodlePanel.addPropertyChangeListener(changeableClearB);  
        
        myMenu.add(optionsMenu);
        
        //creates an array of actions with the icons
        final AbstractToolAction[] toolActions = 
            {new LineAction(PaintGUI.MY_SPECIAL_ICONS[0]), 
             new RectangleAction(PaintGUI.MY_ICONS[1]), 
                new EllipseAction(PaintGUI.MY_ICONS[2])};
        //creates a custom JMenu and JToolBar
        final SpecialMenuBar toolsMenu = new SpecialMenuBar("Tools");
        final SpecialToolBar toolBar = new SpecialToolBar();
        //Adds actions to buttons and then adds them to the tool menu and tool bar.
        for (final AbstractToolAction currentA : toolActions) {
            toolsMenu.createMenuButton(currentA);
            toolBar.createToolButton(currentA);
            currentA.addPropertyChangeListener(toolsMenu);
            currentA.addPropertyChangeListener(toolBar);
        }
        myMenu.add(toolsMenu);
        
        final JMenu helpMenu = createHelpMenu(wIcon);
        myMenu.add(helpMenu);
        
        myFrame.add(toolBar, BorderLayout.SOUTH);
        myFrame.setJMenuBar(myMenu);
        myFrame.setVisible(true);
        
    }
    
    /**
     * Creates a slider adds a listener to it and then returns it.
     * @return JSlider a slider containing an initial thickness, 
     * a maximum thickness and minimum thickness with a listener attached to it.
     */
    private JSlider createSlider() {
        final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 
                MIN_THICKNESS, MAX_THICKNESS, INITIAL_THICKNESS);
        slider.setMajorTickSpacing(MAJOR_TICK);
        slider.setMinorTickSpacing(MINOR_TICK);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        
        /**
         * A change listener that will listen to the thickness slider.
         * @author Derek Jagger Ruiz Garcia
         * @version 11/29/2022
         */
        class SlideListener implements ChangeListener {
            @Override
            public void stateChanged(final ChangeEvent theEvent) {
                final int chosenThickness = slider.getValue();
                myDoodlePanel.canDraw(chosenThickness > 0);
                if (chosenThickness > 0) {
                    myDoodlePanel.setCurrentThickness(chosenThickness);
                } 
            }
        }
        slider.addChangeListener(new SlideListener());
        return slider;
    }
    
    /**
     * Creates a menu using the icon provided and the word Help,
     * to then add a menu item with a listener to the menu, to then return it.
     * @param theIcon the icon that the JOptionPane is going to 
     * display in the message dialog.
     * @return JMenu a JMenu with the Help title and with the provided
     * icon containing an about button with a listener that displays a 
     * JOptionPane when pressed.
     */
    private JMenu createHelpMenu(final ImageIcon theIcon) {
        //creates a help menu
        final JMenu helpMenu = new JMenu("Help");
        final JMenuItem aboutButton = new JMenuItem("About...");
        aboutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                JOptionPane.showMessageDialog(myFrame, 
                        "Derek J. Ruiz Garcia \n Autumn 2022", 
                        "TCSS 305 Paint", JOptionPane.INFORMATION_MESSAGE, theIcon);
            }
        });
        helpMenu.add(aboutButton);
        return helpMenu;
    }
    
    /**
     * An abstract action for the line.
     * @author Derek Jagger Ruiz Garcia
     * @version 11/29/2022
     */
    public class LineAction extends AbstractToolAction {

        /** A generated serialization ID. */
        private static final long serialVersionUID = 1556815184721042561L;

        /**
         * Will create an abstract action using the title "Line" and the icon provided,
         * and will synchronize the items to witch this Abstract actions is attached to.
         * @param theIcon the icon that the buttons are going to display. 
         */
        public LineAction(final ImageIcon theIcon) {
            super("Line", theIcon);
        }
        
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myDoodlePanel.setTool(myLineTool);
            if (myFillButton.isEnabled()) {
                myPCS.firePropertyChange("Line tool", 
                        PaintGUI.MY_ICONS[1], PaintGUI.MY_SPECIAL_ICONS[0]);
                myFillButton.setSelected(false);
                myFillButton.setEnabled(false);
                //this will set it back to disabled
                myDoodlePanel.setFillButton(false);
            }
        }
    }
    
    /**
     * An abstract action for the rectangle.
     * @author Derek Jagger Ruiz Garcia
     * @version 11/29/2022
     */
    public class RectangleAction extends AbstractToolAction {

        /** A generated serialization ID. */
        private static final long serialVersionUID = -7871030088279364388L;

        /**
         * Will create an abstract action using the title "Rectangle" and the icon provided,
         * and will synchronize the items to witch this Abstract actions is attached to.
         * @param theIcon the icon that the buttons are going to display. 
         */
        public RectangleAction(final ImageIcon theIcon) {
            super("Rectangle", theIcon);
        }
        
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myDoodlePanel.setTool(myRectangleTool);
            if (!myFillButton.isEnabled()) {
                myFillButton.setEnabled(true);
            }
            myPCS.firePropertyChange("Rectangle tool", 
                    PaintGUI.MY_ICONS[1], PaintGUI.MY_SPECIAL_ICONS[1]);
        }
    }
    
    /**
     * An abstract action for the ellipse.
     * @author Derek Jagger Ruiz Garcia
     * @version 11/29/2022
     */
    public class EllipseAction extends AbstractToolAction {

        /** A generated serialization ID. */
        private static final long serialVersionUID = 3437026304574047648L;

        /**
         * Will create an abstract action using the title "Ellipse" and the icon provided,
         * and will synchronize the items to witch this Abstract actions is attached to.
         * @param theIcon the icon that the buttons are going to display. 
         */
        public EllipseAction(final ImageIcon theIcon) {
            super("Ellipse", theIcon);
        }
        
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myDoodlePanel.setTool(myEllipseTool);
            if (!myFillButton.isEnabled()) {
                myFillButton.setEnabled(true);
            }
            myPCS.firePropertyChange("Ellipse tool", PaintGUI.MY_ICONS[2], 
                    PaintGUI.MY_SPECIAL_ICONS[2]);
        }
    }
    
    /**
     * A listener for the fill button.
     * @author Derek Jagger Ruiz Garcia
     * @version 12/8/222
     */
    public class FillListener implements ActionListener {
        
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            final JCheckBoxMenuItem box = (JCheckBoxMenuItem) theEvent.getSource();
            myDoodlePanel.setFillButton(box.isSelected());
        }
    }
    
    /**
     * A listener for the color button.
     * @author Derek Jagger Ruiz Garcia
     * @version 12/8/222
     */
    public class OutlineColorListener implements ActionListener {

        public void actionPerformed(final ActionEvent theEvent) {
            final Color chosenColor = JColorChooser.showDialog(myDoodlePanel,
                    "Choose an outline color", myDoodlePanel.getCurrentColor());
            if (chosenColor != null) {
                myDoodlePanel.setCurrentColor(chosenColor);
            }
        }
    }
    
    /**
     * A listener for the fill color button.
     * @author Derek Jagger Ruiz Garcia
     * @version 12/8/222
     */
    public class InnerColorListener implements ActionListener {

        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            final Color chosenColor = JColorChooser.showDialog(myDoodlePanel,
                    "Choose a inner color", myDoodlePanel.getCurrentInnerColor());
            if (chosenColor != null) {
                myDoodlePanel.setCurrentInnerColor(chosenColor);
            }
        }
        
    }
    
    /**
     * A listener that will change the cursor symbol to crosser 
     * once the cursor enters the panel.
     * @author Derek Jagger Ruiz Garcia
     * @version 11/29/2022
     */
    public class MouseEntranceListener extends MouseInputAdapter {
        
        @Override
        public void mouseEntered(final MouseEvent theEvent) {
            myDoodlePanel.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
        }
        
        @Override
        public void mouseExited(final MouseEvent theEvent) {
            myDoodlePanel.setCursor(null);
        }
    }
}
